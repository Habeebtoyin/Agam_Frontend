defmodule ServerWeb.Router do
  use ServerWeb, :router
  import ServerWeb.UserAuth

  use Kaffy.Routes,
    scope: "/admin",
    pipe_through: [:admin, :require_authenticated_user]

  @host :server_web
        |> Application.compile_env(ServerWeb.Endpoint)
        |> Keyword.fetch!(:url)
        |> Keyword.fetch!(:host)

  @content_security_policy (case Mix.env() do
                              :prod ->
                                "default-src 'self'  'unsafe-eval' 'unsafe-inline';" <>
                                  "style-src 'self' fonts.googleapis.com;" <>
                                  "font-src fonts.gstatic.com;" <>
                                  "connect-src ws://#{@host}:*;" <>
                                  "img-src 'self' blob: data:;"

                              _ ->
                                ""
                            end)

  pipeline :admin do
    plug(:accepts, ["html"])
    plug(:fetch_session)
    plug(:fetch_flash)
    plug(:protect_from_forgery)
    plug(:put_secure_browser_headers, %{"content-security-policy" => @content_security_policy})
    plug(:fetch_current_user)
  end

  pipeline :dashboard do
    plug(:accepts, ["html"])
    plug(:fetch_session)
    plug(:fetch_flash)
    plug(:protect_from_forgery)
    plug(:put_secure_browser_headers, %{"content-security-policy" => "default-src 'self'"})
    plug(:put_secure_browser_headers, %{"content-security-policy" => @content_security_policy})
    plug(:fetch_current_user)
  end

  pipeline :browser do
    plug(:accepts, ["html"])
    plug(:fetch_session)
    plug(:fetch_flash)
    plug(:protect_from_forgery)
    plug(SetLocale, gettext: ServerWeb.Gettext, default_locale: "es")
    # plug(:put_secure_browser_headers, %{"content-security-policy" => "default-src 'self'"})
    plug(:put_secure_browser_headers, %{"content-security-policy" => @content_security_policy})
    plug(:fetch_current_user)
  end

  # pipeline :api do
  # plug(:accepts, ["json"])
  # end

  scope "/", ServerWeb do
    pipe_through(:browser)

    # live "/", PageLive, :index
    get("/about", PageController, :about)
    get("/faq", PageController, :faq)
    get("/terms", PageController, :terms)
    get("/", PageController, :index)
  end

  scope "/:locale", ServerWeb do
    pipe_through(:browser)
    get("/", PageController, :index)
    get("/about", PageController, :about)
    get("/faq", PageController, :faq)
    get("/terms", PageController, :terms)
    resources "/news", NewsController, only: [:index, :show]
    get "/inversor", InversorController, :index
  end

  if Mix.env() == :dev do
    scope "/dev" do
      pipe_through [:browser]
      forward "/mailbox", Plug.Swoosh.MailboxPreview
    end
  end

  # Other scopes may use custom stacks.
  # scope "/api", ServerWeb do
  #   pipe_through :api
  # end

  # Enables LiveDashboard only for development
  #
  # If you want to use the LiveDashboard in production, you should put
  # it behind authentication and allow only admins to access it.
  # If your application does not have an admins-only section yet,
  # you can use Plug.BasicAuth to set up some basic authentication
  # as long as you are also using SSL (which you should anyway).
  if Mix.env() in [:dev, :test] do
    import Phoenix.LiveDashboard.Router

    scope "/dashboard" do
      pipe_through(:dashboard)
      live_dashboard("/", metrics: ServerWeb.Telemetry)
    end
  end

  ## Authentication routes
  scope "/", ServerWeb do
    pipe_through([:admin, :redirect_if_user_is_authenticated])

    get("/users/log_in", UserSessionController, :new)
    post("/users/log_in", UserSessionController, :create)
    get("/users/reset_password", UserResetPasswordController, :new)
    post("/users/reset_password", UserResetPasswordController, :create)
    get("/users/reset_password/:token", UserResetPasswordController, :edit)
    put("/users/reset_password/:token", UserResetPasswordController, :update)
  end

  scope "/", ServerWeb do
    pipe_through([:admin, :require_authenticated_user])

    get("/users/settings", UserSettingsController, :edit)
    put("/users/settings", UserSettingsController, :update)
    get("/users/settings/confirm_email/:token", UserSettingsController, :confirm_email)
  end

  scope "/", ServerWeb do
    pipe_through([:admin])

    delete("/users/log_out", UserSessionController, :delete)
    get("/users/confirm", UserConfirmationController, :new)
    post("/users/confirm", UserConfirmationController, :create)
    get("/users/confirm/:token", UserConfirmationController, :confirm)
  end
end