defmodule Server.NewsTest do
  use Server.DataCase

  alias Server.News

  describe "news" do
    alias Server.News.Article

    @valid_attrs %{
      body: "some body",
      img:
        "https://estaticos-cdn.elperiodico.com/clip/5d0a3ba8-43db-4b2f-abc9-882d8344e5d5_alta-libre-aspect-ratio_default_0.jpg",
      published: true,
      title: "some title"
    }
    @update_attrs %{
      body: "some updated body",
      published: false,
      img: "https://graffino.com/_nuxt/img/8e043ae.jpg",
      title: "some updated title"
    }
    @invalid_attrs %{body: nil, published: nil, title: nil}

    def article_fixture(attrs \\ %{}) do
      {:ok, article} =
        attrs
        |> Enum.into(@valid_attrs)
        |> News.create_article()

      article
    end

    test "list_news/0 returns all news" do
      article = article_fixture()
      assert News.list_news() == [article]
    end

    test "get_article!/1 returns the article with given id" do
      article = article_fixture()
      assert News.get_article!(article.id) == article
    end

    test "create_article/1 with valid data creates a article" do
      assert {:ok, %Article{} = article} = News.create_article(@valid_attrs)
      assert article.body == "some body"
      assert article.published == true
      assert article.title == "some title"
    end

    test "create_article/1 with invalid data returns error changeset" do
      assert {:error, %Ecto.Changeset{}} = News.create_article(@invalid_attrs)
    end

    test "update_article/2 with valid data updates the article" do
      article = article_fixture()
      assert {:ok, %Article{} = article} = News.update_article(article, @update_attrs)
      assert article.body == "some updated body"
      assert article.published == false
      assert article.title == "some updated title"
    end

    test "update_article/2 with invalid data returns error changeset" do
      article = article_fixture()
      assert {:error, %Ecto.Changeset{}} = News.update_article(article, @invalid_attrs)
      assert article == News.get_article!(article.id)
    end

    test "delete_article/1 deletes the article" do
      article = article_fixture()
      assert {:ok, %Article{}} = News.delete_article(article)
      assert_raise Ecto.NoResultsError, fn -> News.get_article!(article.id) end
    end

    test "change_article/1 returns a article changeset" do
      article = article_fixture()
      assert %Ecto.Changeset{} = News.change_article(article)
    end
  end
end